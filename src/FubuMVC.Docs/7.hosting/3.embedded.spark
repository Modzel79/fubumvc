<!--Title: Embed FubuMVC Applications-->

<markdown>

<Section title="Getting Started" id="getting-started">

You can use FubuMVC's support for the [Katana web server](http://katanaproject.codeplex.com) to embed FubuMVC applications into any .Net service.
My shop uses this functionality to expose diagnostic views into backend services and other teams have used this functionality
to expose HTTP API's into running services.

The first step is to install the <code>FubuMVC.Katana</code> library to your application or service.

<Nuget name="FubuMVC.Katana" />

Assuming that you already have an <code>IApplicationSource</code> class to bootstrap your application or you only need a very generic
application setup, you will use the <code>EmbeddedFubuMvcServer</code> class to startup the Katana server for your application as
shown in the sample code below.

<Snippet name="bootstrapping-with-katana" />

<Info>Remember to dispose the <code>EmbeddedFubuMvcServer</code> object when you're done with it to shut down Katana gracefully and release the port binding.</Info>

See <TopicLink name="bootstrapping" /> for more information about bootstrapping a FubuMVC application.

</Section>

<Section title="Port Bindings" id="port">

The default port number for <code>EmbeddedFubuMvcServer</code> is 5500.  When you want your application to run with a different port, use
the <code>port</code> argument like this:

<Snippet name="katana-with-explicit-port" />

</Section>

<Section title="The Application Physical Path for Content" id="path">

When FubuMVC starts up an application it needs to know what the root directory where the content (views, scripts, stylesheets, etc.)
is located.  This is done for you in <TopicLink name="hosting/fubu-server" /> or the <TopicLink name="hosting/fubu-server" />, but you
might need to provide the actual content path for the <code>EmbeddedFubuMvcServer</code> objects, especially when you're using the embedded
server for automated testing.  

If no physical path is provided or can be determined as described in the next section, the <code>EmbeddedFubuMvcServer</code> class uses the <code>AppDomain.CurrentDomain.BaseDirectory</code> path as the physical path.  While this is perfectly usable for
headless services, it's generally pretty useless for an application that needs to use content files.  In that case, you need to
give <code>EmbeddedFubuMvcServer</code> the correct physical path as in this code:

<Snippet name="katana-with-explicit-path" />

</Section>

<Section title="Using EmbeddedFubuMvcServer for Testing" id="testing">
If no physical content path is specified, <code>EmbeddedFubuMvcServer</code> will first look for a folder with the same name as the Assembly containing
the <code>IApplicationSource</code> in a sibling directory to the current projects directory. This was done specifically for
integration testing scenarios where you might have a structure like this:

1. /src/MyApplication/MyApplication.csproj
1. /src/MyApplication/MyApplication.cs (IApplicationSource)
1. /src/MyApplication.Testing/MyApplication.Testing.csproj
1. /src/MyApplication.Testing/MyApplicationTester.cs

If I build out an <code>EmbeddedFubuMvcServer</code> object for the <code>MyApplication</code> class in the <code>MyApplication.Testing</code> project,
<code>EmbeddedFubuMvcServer</code> will use _/src/MyApplication_ as the physical path because it can derive the correct application path from
the assembly name that contains <code>MyApplication</code>.

In other words, if you follow the convention of putting the code for each assembly or executable in a folder with the same name, the pathing will just work.

Now that you have a running application, the <code>EmbeddedFubuMvcServer</code> class exposes some properties that will help you
access and drive the running application:

<Snippet name="katana-and-testing" />

See <TopicLink name="automated-testing/using-endpointdriver" /> and <TopicLink name="urls-and-routes/url-resolution" /> for more information

</Section>

<Section title="Auto Start Katana Hosting" id="auto-hosting">

If you are hosting a <ProjectLink name="FubuMVC" /> or <ProjectLink name="FubuTransportation" /> application in a service and want a Katana host
to start for your application on startup, set the <code>KatanaSettings.AutoHostingEnabled</code> property to <code>true</code> as in
this code from our integration tests:

<Snippet name="katana-auto-hosting" />

You can specify the port number you want to use in your <code>FubuRegistry</code>, or set the port number
value in the .Net _appSettings_ configuration with the key  <code>KatanaSettings.AutoHostingEnabled</code>.

Katana hosting is set up by an <code>IActivator</code> if auto hosting is enabled.  The host is stopped and disposed by a <code>IDeactivator</code>
when the containing application is disposed.

<Info>It is possible to use the <code>fubu run</code> hosting against an application that has auto hosting enabled.  In that case, <code>fubu run</code>
will use the port configuration from the <code>KatanaSettings</code></Info>

</Section>

</markdown>