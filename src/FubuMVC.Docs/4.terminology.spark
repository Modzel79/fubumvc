<!--Title: Terminology-->
<!--Url: terminology-->

<markdown>



<Section title="Behaviors and Behavior Chains" id="behaviors">

Internally, the key FubuMVC runtime abstraction is a small chunk of functionality called a _behavior_:

<Snippet name="IActionBehavior" />

Each _endpoint_ in a FubuMVC application is composed of a chain of one or more "behavior" objects nested within each other in
what we frequently refer to as the [Russian Doll
Model](http://codebetter.com/jeremymiller/2011/01/09/fubumvcs-internal-runtime-the-russian-doll-model-and-how-it-compares-to-asp-net-mvc-and-openrasta/).

Even a simple HTTP request is likely to be handled by multiple behaviors. While
FubuMVC comes out of the box with behaviors for common tasks like Json or Xml
serialization/deserialization, calling actions, and rendering views, you can
build your own custom behaviors.

During day to day development most developers are going to be working strictly
with view models, actions, and views, but it's still good to know that it's possible to customize the behavior pipeline. 

</Section>

<Section title="Endpoints, Routes, and Partials" id="endpoints">
Behavior chains can be invoked in FubuMVC either through an HTTP request that matches a predefined _Route_ that matches a known Url pattern or through direct invocation of the chain as a _Partial_ through the <code>IPartialInvoker</code> service.
For the purpose of documentation and diagnostics screens, the term _Endpoints_ is used to refer to the configured behavior chains both with or without a matching Route.
Unlike the web development frameworks like ASP.Net MVC or Web API, FubuMVC creates a unique Route object per endpoint.

_Partials_ are very useful for composing large, complicated screens into manageable chunks, sharing bits of user interface across screens, or even to create configurable screens.
<ProjectLink name="FubuTransportation" uses _Partial's_  for its message handler chains.

<Info>FubuMVC still uses the <a href="http://msdn.microsoft.com/en-us/library/system.web.routing.urlroutingmodule(v=vs.110).aspx">Url Routing Module from ASP.Net</a> as our <a href="http://martinfowler.com/eaaCatalog/frontController.html">Front Controller</a> mechanism.  This may be changed in later versions of FubuMVC in favor of a faster implementation of routing like <a href="https://github.com/phatboyg/Magnum/tree/master/src/Magnum.Routing">Magnum's.</a></Info>

</Section>


<Section title="View, Input, and Output Models" id="view-models">

View, Input, or Output models are typically [Data Transfer
Objects](http://en.wikipedia.org/wiki/Data_transfer_object) that are either
inputs to or outputs from behaviors. It's probably advantageous to think of
view models as messages passed to or between behaviors. As a baked in
*opinion*, FubuMVC strongly prefers that the input models are unique across
actions in your application. FubuMVC can use an input model to resolve URL's or
authorization rules in the system. Likewise, output model signatures from
action methods are used to "attach" view and other output behaviors to a
behavior chain.

<Snippet name="models" />

</Section>

<Section title="Actions" id="actions">

While you *could* treat FubuMVC as a classic MVC framework and use controllers to direct what should happen within a route or input, 
idiomatic FubuMVC usage is to instead use simpler
_actions_ that are just methods on concrete
[POCO](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object) classes in your
application that will be called during an HTTP request like the following:

<Snippet name="overview-homecontroller" />

Typically, you will let FubuMVC itself figure out what else needs to happen on
an HTTP request by applying conventions against the signature of the _actions._
Actions are in turn called by specialized Behavior's that deal with the repetitive
"resolve the input, call the action with that input, store the output" logic.

To make this concrete for a typical HTTP request, FubuMVC will marshal the raw HTTP data into an input model,
then FubuMVC will call your action method directly and store any output where
nested behaviors can find it and write out any necessary HTTP response. This is what we call the _[one model in, one model out](http://rexflex.net/2011/07/fubumvc-one-model-in-one-model-out/)_ philosophy, meaning that actions should typically only be concerned with
your application's data and services rather than exercising framework
machinery.

One of the original goals of FubuMVC was to simplify our controller actions so
that all they had to do was process a request object and return a response with
no coupling to giant base classes or repetitive boilerplate code just to feed
the framework. We believe that the "one model in, one model out" opinion
makes our code easier to read, write, and test by removing the noise code so
prevalent in other .NET solutions. It also greatly improves our ability to
compose the runtime pipeline and creates traceability between parts of the
application.

</Section>

<Section title="Views" id="views">

Now that you've got view models and actions to process them, you need something
to render the view model into HTML. As of this writing, FubuMVC supports the
Razor and Spark view engines. In addition, you can happily have actions
spit out raw HTML or <ProjectLink name="HtmlTags" /> objects.

<Info>We have just recently deprecated the support for WebForms.  We feel that this decision will make the world a slightly better place.</Info>

</Section>



<Section title="Wrappers" id="wrappers">

Wrappers are simply behaviors that you can use to perform additional work
during an HTTP request like authorization checks, validation, caching, activity tracking,
or just extra auditing.  Wrappers are able to stop the processing of nested behaviors in the chain.

</Section>

<Section title="BehaviorGraph and FubuRegistry" id="behaviorgraph">

FubuMVC contains a configuration model called BehaviorGraph that completely
models how each possible HTTP route and headless partial will be handled. For each endpoint (chain)
in the system, the BehaviorGraph models:

  1. Routes and URL's including HTTP constraints
  1. Behavior Chains
  1. Actions to be called
  1. Views or other output behaviors like Json output that will be called
  1. Authorization and/or Authentication rules
  1. Wrappers

You generally won't work directly with these objects daily, but understanding the
underlying BehaviorGraph model is crucial to writing your own FubuMVC
conventionsm, policies, and shared infrastructure Bottles later.

</Section>

<Section title="Inversion of Control Container" id="ioc">

FubuMVC is built around the idea of composition, but that composition can come
at a cost. FubuMVC uses your application's IoC container to do the mechanical work of assembling all the
various pieces, services, behaviors, and extensions that make up a functioning
FubuMVC application. We like to say that FubuMVC is "Dependency Injection
turtles all the way down," meaning that **all** FubuMVC services are resolved
from the IoC container without hacks like "IDependencyResolver."


  <Info>
    At this writing (Nov 2013), FubuMVC supports the StructureMap, Autofac, and Castle Windsor containers, with work ongoing to support Ninject as well.  A few Bottles (FubuMVC.RavenDb) do specifically require StructureMap.
  </Info>

</Section>  
  
<Section title="Bottles" id="bottles">  

FubuMVC uses the [Bottles project](https://github.com/DarthFubuMVC/bottles)
for modularity.  Bottles can be used to break your application up into
different "areas" or to extend your application with new content or abilities.

</Section>


	 
</markdown>

