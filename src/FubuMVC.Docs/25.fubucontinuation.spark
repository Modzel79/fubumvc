<!--Title: Redirects and Filters with FubuContinuation-->
<!--Url: fubucontinuation-->

<markdown>

<Section title="FubuContinuation" id="fubucontinuation">

You'll inevitably need conditional execution in your FubuMVC endpoints.  Whether to render a 404 message if something cannot be found, return validation
messages on validation failures, or redirect the user to an entirely different page if certain conditions are met.

To that end, we introduced the special <code>[FubuContinuation](https://github.com/DarthFubuMVC/fubumvc/blob/master/src/FubuMVC.Core/Continuations/FubuContinuation.cs)</code> class and the much more rarely used [IContinuationDirector](https://github.com/DarthFubuMVC/fubumvc/blob/master/src/FubuMVC.Core/Continuations/IContinuationDirector.cs).

Jumping right to a sample shown below, if a user navigates to _/directions_, they'll be redirected to one Url if they are a special customer
and redirected to a page for normal customers otherwise.

<Snippet name="continuation-usage" />

By just returning a <code>FubuContinuation</code> from our action above, we've declared *what* we want to happen next in a way that's easy to measure and detect in unit tests. 
FubuMVC will add an extra behavior into your chain right behind any Action (or ActionFilter introduced below) that will carry out the actual continuation
logic.

<code>FubuContinuation</code> provides semantics to:

1. Issue an HTTP 302 redirect to a different Url using FubuMVC's url resolution to either an action method or an input model object
1. _Jump the tracks_ (Transfer) and run a completely different chain inline *as a partial* in the current request instead of continuing to the inner behavior
1. Continue normally to the next or inner behavior 
1. End the current request with an Http status code

Any time you abort the current chain with a FubuContinuation, the execution still comes back up through the outer behaviors. 
For example, let's say that you are executing a request that has the <code>TransactionalBehavior</code> behavior shown below
that wraps an inner action that returns a <code>FubuContinuation</code>:

<Snippet name="continuation-up-the-stack" />

The sequence of events is going to be something like:
1. <code>TransactionalBehavior</code> starts a new transaction
1. The inner behaviors process a <code>FubuContinuation.TransferTo()</code> that executes a whole other chain as a partial
1. The execution comes back up through  <code>TransactionalBehavior</code> where it commits the original transaction.


</Section>

<Section title="ActionFilter" id="action-filter">

Consistent with FubuMVC's _one model in, one model out_ philosophy, we recommend using a special kind of _Action_ called an <code>ActionFilter</code>
that optionally takes in a single parameter resolved by content negotiation and always returns a <code>FubuContinuation</code>.

Let's say that we're building a FubuMVC frontend on top of some old COBOL like system that will frequently be taken completely down
for maintenance.  If the backend system is down, we'll redirect all of our FubuMVC pages to a notice that the system is offline.

Our <code>ActionFilter</code> class might look like this:

<Snippet name="offline-filter" />

To apply an <code>ActionFilter</code> as a convention, you would write something like the following:

<Snippet name="offline-filter-policy" />

The [AuthenticationFilter](https://github.com/DarthFubuMVC/FubuMVC.Authentication/blob/master/src/FubuMVC.Authentication/AuthenticationFilter.cs) class from FubuMVC.Authentication
that redirects users to login screens or continues to a screen or service depending on authentication state is an example of an <code>ActionFilter</code>.

</Section>

<Section title="Using the [Filter] Attribute" id="filter-attribute">

To date, most <code>ActionFilter</code> usage has been applied to chains within the system conventionally,
but if you do need to apply an <code>ActionFilter</code> behavior explicitly to just one chains you have the
<code>[Filter]</code> attribute to use on action methods that you want to be wrapped with an <code>ActionFilter</code>:

<Snippet name="filter-attribute-usage" />

The only rule for the <code>[Filter]</code> attribute resolution is that the handler method should have only one public method.

</Section>


<Section title="Putting it All Together" id="big-example">

For a more complex, but very contrived, example, let's say that we have an action that takes in a <code>Number</code> message
and just tells the user what the number really was:

<Snippet name="NumberEndpoint" />

However, we want to treat some numbers as special cases and render different messages or pop into entirely different workflows.
As explained in the previous section, we can place all the conditional redirection logic in an <code>ActionFilter</code> action
method:

<Snippet name="fubucontinuation-in-action" />

</Section>


<Section title="Unit Testing against FubuContinuation" id="unit-testing">
<code>FubuContinuation</code> was specifically designed to make unit testing easier by allowing you to do state-based
assertions against the value of a <code>FubuContinuation</code> returned from an action filter method like this:

<Snippet name="filter-testing" />

<Info>Note that you will have to implement an <code>Equals()</code> method on any input model types you use in the assertion methods</Info>

</Section>


<Section title="IRedirectable" id="redirectable">

If you do want to combine the filtering logic into a normal action method similar to [ActionResult's](http://msdn.microsoft.com/en-us/library/system.web.mvc.actionresult(v=vs.118).aspx) in ASP.Net MVC, you can make
your output model from an action implement the <code>IRedirectable</code> interface like this sample:

<Snippet name="redirectable" />

</Section>

</markdown>

