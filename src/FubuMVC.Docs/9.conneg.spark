<!--Title: Content Negotiation-->
<!--Url: conneg-->

<markdown>

FubuMVC supports the HTTP concept of [Content Negotiation](http://en.wikipedia.org/wiki/Content_negotiation) (colloquially known as _Conneg_).
If you are building websites with views and Ajax endpoints you should very rarely need to deviate from the built in defaults for _Conneg_.  The view
engine implementations in FubuMVC are integrated into the _Conneg_ infrastructure as just another type of _Media Writer_.

<Info>Improving the ease of Conneg customization is one of the major goals of a forthcoming FubuMVC 2.0 release</Info>

</markdown>


<Section title="Terminology and Concepts" id="terminology">
<markdown>
* **[Mimetype](http://en.wikipedia.org/wiki/Internet_media_type)** -- A _media type_ representation of a resource identified by a _mimetype_
* **Input Model** - The model passed into the input of a FubuMVC _Action_
* **Resource Type** - In FubuMVC terms, this is the output model returned from an _Action_ and/or the view model type consumed by a view or another media writer
* **InputBehavior** / **InputNode** -- The behavior and matching <code>BehaviorNode</code> that reads HTTP requests to resolve _Input Model_ objects
* **OutputBehavior** / **OutputNode** -- The behavior and matching <code>BehaviorNode></code> that writes resources out to the HTTP response
* **Media Writer** - A object that can write a resource to one or more media types
* **Media Reader** - An object that can read an input model object from the current HTTP request for one or more mimetype representations
* **Condition** - A *runtime* boolean test modeled by FubuMVC's <code>ICondition</code> interface that evaluates runtime conditions

_Media Reader's_ and _Media Writer's_ can be thought of as small [Strategy pattern](http://en.wikipedia.org/wiki/Strategy_pattern) classes that read and write
strong typed models based on mimetype and runtime conditions.  _InputBehavior_ and _OutputBehavior_ are [mediator](http://en.wikipedia.org/wiki/Mediator_pattern) classes that select and delegate to the
_Media Reader's_ or _Media Writer's_ and FubuMVC's HTTP services.

</markdown>




</Section>


<Section title="How it Works" id="how-it-works">
<markdown>
Consider this simple FubuMVC endpoint:

<Snippet name="endpoint-with-input-and-resource" />

This endpoint accepts an _Input Model_ called <code>InputMessage</code> and returns a _resource_ called <code>ResourceModel</code>.
Notice that the <code>ConnegEndpoint.get_resource()</code> method does nothing but process an input message and return the resulting resource
out the back.  The responsiblity for turning an HTTP request into the <code>InputMessage</code> object and the responsibility for writing
the resulting <code>ResourceModel</code> out to the HTTP response is handled by separate behaviors, one for the request (<code>InputBehavior</code>) and one
for the response (<code>OutputBehavior</code>).  

To make this concrete, say the browser makes an HTTP POST to our <code>/resource</code> endpoint with jquery code like:

<pre>
$.post('/resource', query_data, callback, 'text/json');
</pre> 

In the FubuMVC endpoint, the sequence of events is:

1. The <code>InputBehavior</code> runs first, sees that the request says that it is Json and invokes the registered reader for Json, resolves the <code>InputModel</code> object from the Json body and finally stores the input in the <TopicLink name="runtime-services/fuburequest" /> model bag for the request.
1. The <code>ConnegEndpoint.get_resource()</code> action runs using the <code>InputModel</code> built by <code>InputBehavior</code> and returning a new <code>ResourceModel</code> object that is stored in the <TopicLink name="runtime-services/fuburequest" /> model bag for the request.
1. The <code>OutputBehavior</code> runs last, finds the <code>ResourceModel</code> object stored in <TopicLink name="runtime-services/fuburequest" />, sees that the response should be formatted as Json, selects the _Media Writer_ that can write Json and delegates to that writer.

</markdown>
</Section>


<Section title="How Conneg works with HTTP Requests" id="input">

<markdown>
Rather than rehash how _Conneg_ handles HTTP inputs, here's the exact code from <code>InputBehavior</code> that implements the _Conneg_ input logic (*T* is a generic parameter for the _Input Model_ type of the current chain) with explanatory annotations:
</markdown>
<Snippet name="input-behavior-mechanics" />

</Section>


<markdown>

<Section title="How Conneg works for Responses" id="responses">

The code that implements the _Conneg_ output logic is shown below with annotations:

<Snippet name="output-behavior-mechanics" />

<code>OutputBehavior</code> reads the mimetypes in the HTTP _accepts_ header from left to right looking for the first matching writer by mimetype.  If no specific
match is made, but the _accepts_ header contains the _*/*_ wildcard, <code>OutputBehavior</code> will select the first writer.

To make that more concrete, let's say that we have an output behavior that has three writer's:

1. A Spark/Razor view that renders _text/html_
1. A Json formatter that can write either _text/json_ or _application/json_
1. An Xml formatter that can write either _text/xml_ or _application/xml_

For this _Conneg_ configuration, the table below describes how the output selection will work:

<table class="table">
	<tr>
		<th>HTTP Accept Header</th>
		<th>Will write...</th>
	</tr>
	<tr>
		<td>text/html</td>
		<td>text/html</td>
	</tr>
	<tr>
		<td>application/json</td>
		<td>application/json</td>
	</tr>
	<tr>
		<td>vnd/special;plain/text;text/json</td>
		<td>text/json</td>
	</tr>
	<tr>
		<td>*/*</td>
		<td>text/html</td>
	</tr>
	<tr>
		<td>text/xml;text/json;*.*</td>
		<td>text/xml</td>
	</tr>
	<tr>
		<td>vnd/special;plain/text;*/*</td>
		<td>text/html</td>
	</tr>
	<tr>
		<td>vnd/special;plain/text</td>
		<td>HTTP Status 406</td>
	</tr>
</table>

</Section>

<Section title="Out of the Box Readers" id="ootb-readers">
By itself, <code>FubuMVC.Core</code> comes with these reader strategies:

<table class="table">
<tr>
	<th>Name</th>
	<th>Description</th>
	<th>Mimetypes</th>
</tr>
<tr>
	<td>ModelBindingReader</td>
	<td>Uses <TopicLink name="model-binding" /> to resolve the input</td>
	<td>_application/x-www-form-urlencoded_ or _multipart/form-data_</td>
</tr>
<tr>
	<td>Json Formatter</td>
	<td>Uses the <code>IJsonReader</code> service to deserialize the input message from the request body content</td>
	<td>_application/json_ or _text/json_</td>
</tr>
<tr>
	<td>Xml Formatter</td>
	<td>_application/xml_ or _text/xml_</td>
	<td>Uses the .Net <a href="http://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer(v=vs.110).aspx">XmlSerializer</a> to deserialize the input message from the request body content</td>
</tr>
</table>
</Section>

<Section title="Out of the Box Writers" id="ootb-writers">

<code>FubuMVC.Core</code> also comes with these writer strategies:

<table class="table">
<tr>
	<th>Name</th>
	<th>Description</th>
	<th>Mimetypes</th>
</tr>
<tr>
	<td>Json Formatter</td>
	<td>Writes the resource object with the <code>IJsonWriter</code> service</td>
	<td>_application/json_ or _text/json_</td>
</tr>
<tr>
	<td>Xml Formatter</td>
	<td>Serializes the resource object with the .Net <code>XmlSerializer</code> and writes to the output stream</td>
	<td>_application/xml_ or _text/xml_</td>
</tr>
<tr>
	<td>Html String Writer</td>
	<td>Calls <code>ToString()</code> on the resource model and writes that string to the output</td>
	<td>_text/html_</td>
</tr>
<tr>
	<td>String Writer</td>
	<td>For actions that return a .Net <code>String</code>, just write that string to the output</td>
	<td>_text/html_</td>
</tr>
<tr>
	<td>AjaxContinuationWriter</td>
	<td>Writes an <code>AjaxContinuation</code> output object as Json</td>
	<td>_application/json_ or _text/json_</td>
</tr>
</table>
</Section>

<Section title="Spoofing the Mimetypes" id="spoofing">
Sometimes you just cannot count on the web client to play nicely with how they format HTTP requests to your FubuMVC endpoints (looking at you Internet Explorer).

Let's say that your FubuMVC system receives malformed HTTP requests from a web browser using [XmlHttpRequest](http://www.w3schools.com/xml/xml_http.asp) where the _accept_ header is completely missing.
_Conneg_ uses the <code>CurrentMimeType</code> class to represent the HTTP _accept_ and _content-type_ headers.
We can write a new behavior like the class below to alter the  <code>CurrentMimeType</code> object for the request before the _Conneg_ output behavior runs to
just fill in the missing _accept_ header.

<Snippet name="spoofing-current-mimetype" />

The next step is to somehow get the spoofing behavior into our Ajax endpoint chains.
As an example, let's say that our convention is that we look for any chain that has
an _Action_ from a class that has the text "Ajax" in its name (i.e. MyAjaxEndpoint):

<Snippet name="spoofing-mimetype-policy" />




<Info>Spoofing the <i>accept</i> and <i>content-type</i> headers for <i>Conneg</i> has been identified as an opportunity for improvement in FubuMVC 2.0</Info>

</Section>

<Section title="Writing a Custom IMediaReader" id="readers">

You can create completely custom <code>IMediaReader</code> implementations like this sample:

<Snippet name="custom-reader" />

TODO(link to ICurrentHttpRequest)
TODO(link to IStreamingData)


</Section>

<Section title="Writing a Custom IMediaWriter" id="writers">

You can create completely custom <code>IMediaWriter</code> implementations like this sample:

<Snippet name="custom-writer" />

TODO(link to IOutputWriter)

</Section>


<Section title="Explicitly Configuring Conneg" id="explicit-config">

The <code>BehaviorChain.Input</code> and <code>BehaviorChain.Output</code> properties can be used to add, remove, query, and reorder readers and writers.

<Snippet name="conneg-manipulation" />

TODO(link to working with behavior graph and chains)

</Section>

<Section title="Conneg Policies and Conventions" id="conventions">

Content negotiation readers and writers can be applied through conventions/policies like so:

<Snippet name="conneg-policies" />

TODO(link to creating custom policies)

</Section>


<Section title="Conditional Writers" id="conditional-writers">

You may want to use multiple writer's for the same resource and mimetype on the same endpoint,
but choose the writer based on some sort of runtime test for things like customer or user profiles,
authorization rules, or customization. The original usage for this functionality was for allowing
FubuMVC's view engines to attach different views for different devices (a smartphone view versus a view
for a full screen desktop for example).

The following code is a simplistic example of conditional writers:

<Snippet name="add-conditions-to-writer" />

In the case of having multiple writers for the same mimetype, _Conneg_ will select the first writer where
the condition is true, so do pay attention to ordering within the output node.

</Section>


<Section title="Views and Conneg" id="views">
As of FubuMVC 1.0+, view engine rendering is just a _Conneg_ <code>IMediaWriter</code> that responds to the mimetype 'text/html'.
That being said, it's perfectly possible to make the same endpoint render a view when the client requests 'text/html' and still
respond to other mimetypes without changing your _Action_.

Below is a sample policy to add Json reading and writing to selected endpoints: 

<Snippet name="conneg-add-json-to-views" />

TODO(move this sample and the entire content over to the view engine docs)

</Section>


</markdown>


